# modules/retroalimentacion.py
import random
from datetime import datetime


class SistemaRetroalimentacion:
    def __init__(self):
        self.mensajes_motivacion = {
            "excelente": [
                "¬°Perfecto! üåü",
                "¬°Incre√≠ble trabajo! üéâ",
                "¬°Eres fant√°stico! ‚≠ê",
                "¬°Sobresaliente! üëè",
                "¬°Magn√≠fico! üèÜ"
            ],
            "muy_bien": [
                "¬°Muy bien! üëç",
                "¬°Genial! üòä",
                "¬°Estupendo! üéØ",
                "¬°Bien hecho! ‚ú®",
                "¬°Excelente progreso! üìà"
            ],
            "bien": [
                "¬°Buen trabajo! üòä",
                "¬°Vas por buen camino! üëç",
                "¬°Sigue as√≠! üí™",
                "¬°Bien! üôÇ",
                "¬°No est√° mal! üëå"
            ],
            "necesita_mejora": [
                "¬°Puedes hacerlo mejor! üí™",
                "¬°Sigue practicando! üìö",
                "¬°No te rindas! üåà",
                "¬°La pr√°ctica hace al maestro! üéØ",
                "¬°Int√©ntalo de nuevo! üîÑ"
            ],
            "animo": [
                "¬°No te preocupes! üòä",
                "¬°Todos aprendemos paso a paso! üë£",
                "¬°Lo importante es seguir intentando! üåü",
                "¬°Cada error es una oportunidad de aprender! üí°",
                "¬°T√∫ puedes! üí™"
            ]
        }

        self.consejos_por_tipo = {
            "pronunciacion": [
                "Intenta hablar m√°s despacio y articular bien cada sonido",
                "Practica frente a un espejo para ver c√≥mo mueves la boca",
                "Escucha atentamente c√≥mo suenan las palabras",
                "Respira profundo antes de hablar",
                "No tengas miedo de exagerar los movimientos de la boca"
            ],
            "lectura": [
                "Lee en voz alta para practicar la fluidez",
                "T√≥mate tu tiempo, no hay prisa",
                "Se√±ala con el dedo cada palabra que lees",
                "Si no entiendes una palabra, pregunta su significado",
                "Lee un poco cada d√≠a para mejorar"
            ],
            "ejercicios": [
                "Revisa tu respuesta antes de enviarla",
                "Piensa en el significado de las palabras",
                "No tengas miedo de cometer errores",
                "Practica un poco cada d√≠a",
                "Pide ayuda cuando la necesites"
            ]
        }

        self.logros_personalizados = {
            "primera_vez": "¬°Es tu primera vez haciendo este ejercicio! üåü",
            "racha_ejercicios": "¬°Has completado {count} ejercicios seguidos! üî•",
            "mejora_precision": "¬°Tu precisi√≥n ha mejorado {mejora}%! üìà",
            "nuevo_nivel": "¬°Has subido al nivel {nivel}! üèÜ",
            "perfeccionista": "¬°Respuesta perfecta! üíØ",
            "persistencia": "¬°No te rindes f√°cilmente! üí™"
        }

    def generar_retroalimentacion(self, precision, tipo_ejercicio, es_primera_vez=False, mejora_anterior=0):
        """Generar retroalimentaci√≥n basada en el rendimiento"""
        # Determinar nivel de rendimiento
        if precision >= 95:
            nivel = "excelente"
            color = "success"
        elif precision >= 80:
            nivel = "muy_bien"
            color = "success"
        elif precision >= 60:
            nivel = "bien"
            color = "info"
        elif precision >= 40:
            nivel = "necesita_mejora"
            color = "warning"
        else:
            nivel = "animo"
            color = "danger"

        # Mensaje principal
        mensaje_principal = random.choice(self.mensajes_motivacion[nivel])

        # Agregar detalles espec√≠ficos
        detalles = []

        if precision == 100:
            detalles.append("¬°Respuesta perfecta! Sin errores.")
        elif precision >= 80:
            detalles.append(f"Precisi√≥n del {precision}%. ¬°Muy bien!")
        else:
            detalles.append(f"Precisi√≥n del {precision}%. Puedes mejorar.")

        # Agregar consejo espec√≠fico
        if precision < 80:
            consejo = random.choice(self.consejos_por_tipo.get(tipo_ejercicio, []))
            if consejo:
                detalles.append(f"üí° Consejo: {consejo}")

        # Verificar logros especiales
        logros = []
        if es_primera_vez:
            logros.append(self.logros_personalizados["primera_vez"])

        if precision == 100:
            logros.append(self.logros_personalizados["perfeccionista"])

        if mejora_anterior > 0 and precision > mejora_anterior + 10:
            mejora = precision - mejora_anterior
            logros.append(self.logros_personalizados["mejora_precision"].format(mejora=mejora))

        return {
            "mensaje_principal": mensaje_principal,
            "detalles": detalles,
            "logros": logros,
            "precision": precision,
            "color": color,
            "nivel_rendimiento": nivel
        }

    def generar_retroalimentacion_pronunciacion(self, vocales_detectadas, vocales_esperadas=None):
        """Retroalimentaci√≥n espec√≠fica para ejercicios de pronunciaci√≥n"""
        total_detectadas = len(vocales_detectadas)

        if total_detectadas == 0:
            return {
                "mensaje": "No se detectaron vocales claramente. üé§",
                "consejos": [
                    "Aseg√∫rate de que el micr√≥fono funcione correctamente",
                    "Habla m√°s cerca del micr√≥fono",
                    "Pronuncia m√°s fuerte y claro",
                    "Reduce el ruido de fondo"
                ],
                "color": "warning"
            }

        # Analizar distribuci√≥n de vocales
        conteo_vocales = {}
        for vocal in vocales_detectadas:
            if vocal != "Desconocido":
                conteo_vocales[vocal] = conteo_vocales.get(vocal, 0) + 1

        # Generar mensaje basado en variedad de vocales
        vocales_diferentes = len(conteo_vocales)

        if vocales_diferentes >= 4:
            mensaje = "¬°Excelente! Detectamos una gran variedad de vocales. üåü"
            color = "success"
        elif vocales_diferentes >= 2:
            mensaje = "¬°Bien! Se detectaron varias vocales diferentes. üëç"
            color = "info"
        else:
            mensaje = "Se detectaron pocas vocales. Intenta variar m√°s tu pronunciaci√≥n. üéØ"
            color = "warning"

        # Consejos espec√≠ficos por vocal
        consejos = []
        for vocal, cantidad in conteo_vocales.items():
            if cantidad >= 3:
                consejos.append(f"Excelente pronunciaci√≥n de la vocal '{vocal}' ({cantidad} veces)")

        # Consejos generales de pronunciaci√≥n
        if vocales_diferentes < 3:
            consejos.extend([
                "Intenta pronunciar todas las vocales: A, E, I, O, U",
                "Abre bien la boca para las vocales A y O",
                "Sonr√≠e ligeramente para las vocales E e I",
                "Redondea los labios para la vocal U"
            ])

        return {
            "mensaje": mensaje,
            "conteo_vocales": conteo_vocales,
            "total_vocales": total_detectadas,
            "consejos": consejos[:3],  # M√°ximo 3 consejos
            "color": color
        }

    def generar_reporte_progreso(self, estadisticas_usuario):
        """Generar un reporte de progreso del usuario"""
        ejercicios = estadisticas_usuario.get("ejercicios_completados", 0)
        precision = estadisticas_usuario.get("precision_promedio", 0)
        racha = estadisticas_usuario.get("racha_dias", 0)

        # Mensaje principal basado en el progreso
        if ejercicios >= 50:
            mensaje_main = "¬°Eres un estudiante dedicado! üèÜ"
        elif ejercicios >= 20:
            mensaje_main = "¬°Excelente progreso! üìà"
        elif ejercicios >= 5:
            mensaje_main = "¬°Vas por buen camino! üåü"
        else:
            mensaje_main = "¬°Seguimos aprendiendo juntos! üå±"

        # Generar insights
        insights = []

        if precision >= 90:
            insights.append("Tu precisi√≥n es excepcional")
        elif precision >= 70:
            insights.append("Mantienes una buena precisi√≥n")
        else:
            insights.append("Hay oportunidad de mejorar la precisi√≥n")

        if racha >= 7:
            insights.append(f"¬°{racha} d√≠as de pr√°ctica consecutiva!")
        elif racha >= 3:
            insights.append(f"Llevas {racha} d√≠as practicando")
        else:
            insights.append("Intenta practicar m√°s regularmente")

        # Recomendaciones personalizadas
        recomendaciones = []

        if precision < 70:
            recomendaciones.append("Dedica m√°s tiempo a cada ejercicio")
            recomendaciones.append("Revisa tus respuestas antes de enviarlas")

        if racha < 3:
            recomendaciones.append("Intenta practicar un poco cada d√≠a")
            recomendaciones.append("Establece recordatorios para practicar")

        if ejercicios < 10:
            recomendaciones.append("Explora diferentes tipos de ejercicios")
            recomendaciones.append("No tengas miedo de cometer errores")

        return {
            "mensaje_principal": mensaje_main,
            "estadisticas": {
                "ejercicios": ejercicios,
                "precision": f"{precision:.1f}%",
                "racha": f"{racha} d√≠as"
            },
            "insights": insights,
            "recomendaciones": recomendaciones[:3],  # M√°ximo 3 recomendaciones
            "fecha": datetime.now().strftime("%d/%m/%Y")
        }

    def calcular_puntos_bonus(self, precision, tiempo_respuesta=None, es_racha=False):
        """Calcular puntos bonus basados en rendimiento"""
        puntos_base = 10
        bonus = 0

        # Bonus por precisi√≥n
        if precision == 100:
            bonus += 10  # Perfecto
        elif precision >= 90:
            bonus += 5  # Excelente
        elif precision >= 80:
            bonus += 3  # Muy bien

        # Bonus por velocidad (si se proporciona tiempo de respuesta)
        if tiempo_respuesta and tiempo_respuesta < 30:  # Menos de 30 segundos
            bonus += 2

        # Bonus por racha
        if es_racha:
            bonus += 5

        return puntos_base + bonus